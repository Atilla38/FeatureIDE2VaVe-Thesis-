/**
 */
package FeatureIDEXSD.provider;

import FeatureIDEXSD.util.FeatureIDEXSDAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FeatureIDEXSDItemProviderAdapterFactory extends FeatureIDEXSDAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FeatureIDEXSDItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.AltType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AltTypeItemProvider altTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.AltType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAltTypeAdapter() {
		if (altTypeItemProvider == null) {
			altTypeItemProvider = new AltTypeItemProvider(this);
		}

		return altTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.AndType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndTypeItemProvider andTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.AndType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndTypeAdapter() {
		if (andTypeItemProvider == null) {
			andTypeItemProvider = new AndTypeItemProvider(this);
		}

		return andTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.BinaryExpressionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryExpressionTypeItemProvider binaryExpressionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.BinaryExpressionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryExpressionTypeAdapter() {
		if (binaryExpressionTypeItemProvider == null) {
			binaryExpressionTypeItemProvider = new BinaryExpressionTypeItemProvider(this);
		}

		return binaryExpressionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.BinaryExtendedNodeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryExtendedNodeTypeItemProvider binaryExtendedNodeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.BinaryExtendedNodeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryExtendedNodeTypeAdapter() {
		if (binaryExtendedNodeTypeItemProvider == null) {
			binaryExtendedNodeTypeItemProvider = new BinaryExtendedNodeTypeItemProvider(this);
		}

		return binaryExtendedNodeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.BinaryNodeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryNodeTypeItemProvider binaryNodeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.BinaryNodeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryNodeTypeAdapter() {
		if (binaryNodeTypeItemProvider == null) {
			binaryNodeTypeItemProvider = new BinaryNodeTypeItemProvider(this);
		}

		return binaryNodeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.CalculationsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalculationsTypeItemProvider calculationsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.CalculationsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalculationsTypeAdapter() {
		if (calculationsTypeItemProvider == null) {
			calculationsTypeItemProvider = new CalculationsTypeItemProvider(this);
		}

		return calculationsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.CommentsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommentsTypeItemProvider commentsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.CommentsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommentsTypeAdapter() {
		if (commentsTypeItemProvider == null) {
			commentsTypeItemProvider = new CommentsTypeItemProvider(this);
		}

		return commentsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.ConjType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConjTypeItemProvider conjTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.ConjType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConjTypeAdapter() {
		if (conjTypeItemProvider == null) {
			conjTypeItemProvider = new ConjTypeItemProvider(this);
		}

		return conjTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.ConstraintsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintsTypeItemProvider constraintsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.ConstraintsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintsTypeAdapter() {
		if (constraintsTypeItemProvider == null) {
			constraintsTypeItemProvider = new ConstraintsTypeItemProvider(this);
		}

		return constraintsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.DisjType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisjTypeItemProvider disjTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.DisjType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisjTypeAdapter() {
		if (disjTypeItemProvider == null) {
			disjTypeItemProvider = new DisjTypeItemProvider(this);
		}

		return disjTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.EqType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EqTypeItemProvider eqTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.EqType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEqTypeAdapter() {
		if (eqTypeItemProvider == null) {
			eqTypeItemProvider = new EqTypeItemProvider(this);
		}

		return eqTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionItemProvider expressionItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionAdapter() {
		if (expressionItemProvider == null) {
			expressionItemProvider = new ExpressionItemProvider(this);
		}

		return expressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.ExtendedFeatureModelType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtendedFeatureModelTypeItemProvider extendedFeatureModelTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.ExtendedFeatureModelType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtendedFeatureModelTypeAdapter() {
		if (extendedFeatureModelTypeItemProvider == null) {
			extendedFeatureModelTypeItemProvider = new ExtendedFeatureModelTypeItemProvider(this);
		}

		return extendedFeatureModelTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.ExtendedLeafType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtendedLeafTypeItemProvider extendedLeafTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.ExtendedLeafType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtendedLeafTypeAdapter() {
		if (extendedLeafTypeItemProvider == null) {
			extendedLeafTypeItemProvider = new ExtendedLeafTypeItemProvider(this);
		}

		return extendedLeafTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.ExtendedNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtendedNodeItemProvider extendedNodeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.ExtendedNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtendedNodeAdapter() {
		if (extendedNodeItemProvider == null) {
			extendedNodeItemProvider = new ExtendedNodeItemProvider(this);
		}

		return extendedNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.FeatureModelType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureModelTypeItemProvider featureModelTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.FeatureModelType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureModelTypeAdapter() {
		if (featureModelTypeItemProvider == null) {
			featureModelTypeItemProvider = new FeatureModelTypeItemProvider(this);
		}

		return featureModelTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.FeatureOrderType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureOrderTypeItemProvider featureOrderTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.FeatureOrderType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureOrderTypeAdapter() {
		if (featureOrderTypeItemProvider == null) {
			featureOrderTypeItemProvider = new FeatureOrderTypeItemProvider(this);
		}

		return featureOrderTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.FeatureType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureTypeItemProvider featureTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.FeatureType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureTypeAdapter() {
		if (featureTypeItemProvider == null) {
			featureTypeItemProvider = new FeatureTypeItemProvider(this);
		}

		return featureTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.GraphicsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphicsTypeItemProvider graphicsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.GraphicsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphicsTypeAdapter() {
		if (graphicsTypeItemProvider == null) {
			graphicsTypeItemProvider = new GraphicsTypeItemProvider(this);
		}

		return graphicsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.ImpType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImpTypeItemProvider impTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.ImpType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImpTypeAdapter() {
		if (impTypeItemProvider == null) {
			impTypeItemProvider = new ImpTypeItemProvider(this);
		}

		return impTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.LeafType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeafTypeItemProvider leafTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.LeafType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeafTypeAdapter() {
		if (leafTypeItemProvider == null) {
			leafTypeItemProvider = new LeafTypeItemProvider(this);
		}

		return leafTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.Node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeItemProvider nodeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.Node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeAdapter() {
		if (nodeItemProvider == null) {
			nodeItemProvider = new NodeItemProvider(this);
		}

		return nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.NotType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotTypeItemProvider notTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.NotType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotTypeAdapter() {
		if (notTypeItemProvider == null) {
			notTypeItemProvider = new NotTypeItemProvider(this);
		}

		return notTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.OrType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrTypeItemProvider orTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.OrType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrTypeAdapter() {
		if (orTypeItemProvider == null) {
			orTypeItemProvider = new OrTypeItemProvider(this);
		}

		return orTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.PropertiesType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertiesTypeItemProvider propertiesTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.PropertiesType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertiesTypeAdapter() {
		if (propertiesTypeItemProvider == null) {
			propertiesTypeItemProvider = new PropertiesTypeItemProvider(this);
		}

		return propertiesTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.RuleType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleTypeItemProvider ruleTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.RuleType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleTypeAdapter() {
		if (ruleTypeItemProvider == null) {
			ruleTypeItemProvider = new RuleTypeItemProvider(this);
		}

		return ruleTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.StructType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructTypeItemProvider structTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.StructType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructTypeAdapter() {
		if (structTypeItemProvider == null) {
			structTypeItemProvider = new StructTypeItemProvider(this);
		}

		return structTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.StructType1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructType1ItemProvider structType1ItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.StructType1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructType1Adapter() {
		if (structType1ItemProvider == null) {
			structType1ItemProvider = new StructType1ItemProvider(this);
		}

		return structType1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.UnaryExpressionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryExpressionTypeItemProvider unaryExpressionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.UnaryExpressionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryExpressionTypeAdapter() {
		if (unaryExpressionTypeItemProvider == null) {
			unaryExpressionTypeItemProvider = new UnaryExpressionTypeItemProvider(this);
		}

		return unaryExpressionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.UnaryExtendedNodeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryExtendedNodeTypeItemProvider unaryExtendedNodeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.UnaryExtendedNodeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryExtendedNodeTypeAdapter() {
		if (unaryExtendedNodeTypeItemProvider == null) {
			unaryExtendedNodeTypeItemProvider = new UnaryExtendedNodeTypeItemProvider(this);
		}

		return unaryExtendedNodeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.UnaryNodeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryNodeTypeItemProvider unaryNodeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.UnaryNodeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryNodeTypeAdapter() {
		if (unaryNodeTypeItemProvider == null) {
			unaryNodeTypeItemProvider = new UnaryNodeTypeItemProvider(this);
		}

		return unaryNodeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FeatureIDEXSD.VarType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VarTypeItemProvider varTypeItemProvider;

	/**
	 * This creates an adapter for a {@link FeatureIDEXSD.VarType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVarTypeAdapter() {
		if (varTypeItemProvider == null) {
			varTypeItemProvider = new VarTypeItemProvider(this);
		}

		return varTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (altTypeItemProvider != null) altTypeItemProvider.dispose();
		if (andTypeItemProvider != null) andTypeItemProvider.dispose();
		if (binaryExpressionTypeItemProvider != null) binaryExpressionTypeItemProvider.dispose();
		if (binaryExtendedNodeTypeItemProvider != null) binaryExtendedNodeTypeItemProvider.dispose();
		if (binaryNodeTypeItemProvider != null) binaryNodeTypeItemProvider.dispose();
		if (calculationsTypeItemProvider != null) calculationsTypeItemProvider.dispose();
		if (commentsTypeItemProvider != null) commentsTypeItemProvider.dispose();
		if (conjTypeItemProvider != null) conjTypeItemProvider.dispose();
		if (constraintsTypeItemProvider != null) constraintsTypeItemProvider.dispose();
		if (disjTypeItemProvider != null) disjTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (eqTypeItemProvider != null) eqTypeItemProvider.dispose();
		if (expressionItemProvider != null) expressionItemProvider.dispose();
		if (extendedFeatureModelTypeItemProvider != null) extendedFeatureModelTypeItemProvider.dispose();
		if (extendedLeafTypeItemProvider != null) extendedLeafTypeItemProvider.dispose();
		if (extendedNodeItemProvider != null) extendedNodeItemProvider.dispose();
		if (featureModelTypeItemProvider != null) featureModelTypeItemProvider.dispose();
		if (featureOrderTypeItemProvider != null) featureOrderTypeItemProvider.dispose();
		if (featureTypeItemProvider != null) featureTypeItemProvider.dispose();
		if (graphicsTypeItemProvider != null) graphicsTypeItemProvider.dispose();
		if (impTypeItemProvider != null) impTypeItemProvider.dispose();
		if (leafTypeItemProvider != null) leafTypeItemProvider.dispose();
		if (nodeItemProvider != null) nodeItemProvider.dispose();
		if (notTypeItemProvider != null) notTypeItemProvider.dispose();
		if (orTypeItemProvider != null) orTypeItemProvider.dispose();
		if (propertiesTypeItemProvider != null) propertiesTypeItemProvider.dispose();
		if (ruleTypeItemProvider != null) ruleTypeItemProvider.dispose();
		if (structTypeItemProvider != null) structTypeItemProvider.dispose();
		if (structType1ItemProvider != null) structType1ItemProvider.dispose();
		if (unaryExpressionTypeItemProvider != null) unaryExpressionTypeItemProvider.dispose();
		if (unaryExtendedNodeTypeItemProvider != null) unaryExtendedNodeTypeItemProvider.dispose();
		if (unaryNodeTypeItemProvider != null) unaryNodeTypeItemProvider.dispose();
		if (varTypeItemProvider != null) varTypeItemProvider.dispose();
	}

}
