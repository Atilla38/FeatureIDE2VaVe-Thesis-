<?xml version="1.0" encoding="UTF-8"?>
<!-- Mit XMLSpy v2021 rel. 3 (x64) (http://www.altova.com) von Atilla (Karlsruher Institut fÃ¼r Technologie) bearbeitet -->
<!-- W3C Schema erstellt mit XMLSpy v2021 rel. 3 (x64) (http://www.altova.com) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<xs:complexType name="unaryNodeType">
		<xs:complexContent>
			<xs:extension base="node">
				<xs:sequence>
					<xs:group ref="nodeGroup" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="leafType">
		<xs:complexContent>
			<xs:extension base="node"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="binaryExtendedNodeType">
		<xs:complexContent>
			<xs:extension base="extendedNode">
				<xs:sequence>
					<xs:group ref="extendedNodeGroup" minOccurs="2" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="extendedFeatureModel">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="properties" minOccurs="0"/>
				<xs:element name="struct">
					<xs:complexType>
						<xs:group ref="extendedNodeGroup"/>
					</xs:complexType>
				</xs:element>
				<xs:element ref="constraints" minOccurs="0"/>
				<xs:element ref="calculations" minOccurs="0"/>
				<xs:element ref="comments" minOccurs="0"/>
				<xs:element ref="featureOrder" minOccurs="0"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:group name="extendedNodeGroup">
		<xs:choice>
			<xs:element name="feature" type="extendedLeafType"/>
			<xs:element name="alt" type="binaryExtendedNodeType"/>
			<xs:element name="or" type="binaryExtendedNodeType"/>
			<xs:element name="and" type="unaryExtendedNodeType"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="extendedLeafType">
		<xs:complexContent>
			<xs:extension base="extendedNode"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="unaryExtendedNodeType">
		<xs:complexContent>
			<xs:extension base="extendedNode">
				<xs:sequence>
					<xs:group ref="extendedNodeGroup" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="extendedNode">
		<xs:complexContent>
			<xs:extension base="node">
				<xs:sequence>
					<xs:element name="attribute" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="binaryNodeType">
		<xs:complexContent>
			<xs:extension base="node">
				<xs:sequence>
					<xs:group ref="nodeGroup" minOccurs="2" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:group name="nodeGroup">
		<xs:sequence>
			<xs:element ref="nodeList"/>
		</xs:sequence>
	</xs:group>
	<xs:element name="c" type="xs:string"/>
	<xs:element name="calculations">
		<xs:complexType>
			<xs:attribute name="key" type="xs:string" use="required"/>
			<xs:attribute name="value" type="xs:boolean" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="comments">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="c" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="constraints">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="rule" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="description" type="xs:string"/>
	<xs:complexType name="disjType">
		<xs:complexContent>
			<xs:extension base="binaryExpressionType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="conj" type="conjType" substitutionGroup="expressionList"/>
	<xs:complexType name="notType">
		<xs:complexContent>
			<xs:extension base="unaryExpressionType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="alt" type="altType" substitutionGroup="nodeList"/>
	<xs:element name="or" type="orType" substitutionGroup="nodeList"/>
	<xs:element name="and" type="andType" substitutionGroup="nodeList"/>
	<xs:element name="feature" type="featureType" substitutionGroup="nodeList"/>
	<xs:element name="eq" type="eqType" substitutionGroup="expressionList"/>
	<xs:complexType name="impType">
		<xs:complexContent>
			<xs:extension base="binaryExpressionType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="altType">
		<xs:complexContent>
			<xs:extension base="binaryNodeType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="orType">
		<xs:complexContent>
			<xs:extension base="binaryNodeType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="andType">
		<xs:complexContent>
			<xs:extension base="unaryNodeType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="featureType">
		<xs:complexContent>
			<xs:extension base="leafType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="nodeList" type="node" abstract="true"/>
	<xs:element name="var" abstract="false" substitutionGroup="expressionList">
		<xs:complexType mixed="true">
			<xs:complexContent>
				<xs:extension base="expression"/>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="eqType">
		<xs:complexContent>
			<xs:extension base="binaryExpressionType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="disj" type="disjType" substitutionGroup="expressionList"/>
	<xs:element name="expressionList" type="expression" abstract="true"/>
	<xs:group name="expressionGroup">
		<xs:choice>
			<xs:element ref="expressionList"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="unaryExpressionType">
		<xs:complexContent>
			<xs:extension base="expression">
				<xs:choice>
					<xs:group ref="expressionGroup"/>
				</xs:choice>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="not" type="notType" substitutionGroup="expressionList"/>
	<xs:complexType name="conjType">
		<xs:complexContent>
			<xs:extension base="binaryExpressionType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="imp" type="impType" substitutionGroup="expressionList"/>
	<xs:complexType name="binaryExpressionType">
		<xs:complexContent>
			<xs:extension base="expression">
				<xs:choice>
					<xs:group ref="expressionGroup" minOccurs="2" maxOccurs="2"/>
				</xs:choice>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="node">
		<xs:sequence>
			<xs:element ref="description" minOccurs="0"/>
			<xs:element ref="graphics" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="abstract" type="xs:boolean"/>
		<xs:attribute name="mandatory" type="xs:boolean"/>
		<xs:attribute name="hidden" type="xs:boolean"/>
	</xs:complexType>
	<xs:element name="featureModel">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="properties" minOccurs="0"/>
				<xs:element name="struct">
					<xs:complexType>
						<xs:sequence>
						<xs:element ref="nodeList"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element ref="constraints" minOccurs="0"/>
				<xs:element ref="calculations" minOccurs="0"/>
				<xs:element ref="comments" minOccurs="0"/>
				<xs:element ref="featureOrder" minOccurs="0"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="featureOrder">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="feature" type="leafType" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attribute name="userDefined" type="xs:boolean" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="graphics">
		<xs:complexType>
			<xs:attribute name="key" type="xs:string" use="required"/>
			<xs:attribute name="value" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="properties">
		<xs:complexType>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="graphics"/>
				<xs:element ref="calculations"/>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="expression" abstract="false"/>
	<xs:element name="rule">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="description" minOccurs="0"/>
				<xs:choice>
					<xs:group ref="expressionGroup"/>
				</xs:choice>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
</xs:schema>